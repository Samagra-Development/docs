(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{168:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(1),r=t(9),i=(t(0),t(237)),l={id:"AdminAddingMultipleLanguages",title:"Adding Multiple Languages",sidebar_label:"Adding Multiple Languages"},o={id:"AdminAddingMultipleLanguages",title:"Adding Multiple Languages",description:"## Overview",source:"@site/docs/Admin - Internationalisation.md",permalink:"/docs/docs/AdminAddingMultipleLanguages",editUrl:"https://github.com/Samagra-Development/docs/edit/master/docs/Admin - Internationalisation.md",sidebar_label:"Adding Multiple Languages",sidebar:"someSidebar",previous:{title:"Sidebar Config and Nested Dropdowns",permalink:"/docs/docs/AdminSidebarConfig"},next:{title:"Adding Custom Routes",permalink:"/docs/docs/AdminAddingCustomRoutes"}},s=[{value:"Overview",id:"overview",children:[{value:"Implementation:",id:"implementation",children:[]},{value:"Usage:",id:"usage",children:[]}]}],c={rightToc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"overview"},"Overview"),Object(i.b)("p",null,"We supports multiple language integration throughout the admin portal. User will get language switcher on the top right of the Appbar."),Object(i.b)("h3",{id:"implementation"},"Implementation:"),Object(i.b)("h4",{id:"youll-need-language-files-for-all-the-supported-files-in-json-format-for-example"},"You'll need language files for all the supported files in JSON format. For example:"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"For English JSON:")," english.json"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'  {\n        "ra":{\n            "actions":{\n                "add": "Add",\n                "remove": "Remove"\n            }\n        }\n    }\n')),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"For French JSON:")," french.json"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),' {\n        "ra":{\n                "actions":{\n                    "add": "Ajouter",\n                    "remove": "Supprimer"\n            }\n        }\n    }\n')),Object(i.b)("h4",{id:"after-this-youll-need-to-import-and-include-these-files-into-the-i18nprovider-in-srcappjs-as-follows"},"After this, you'll need to import and include these files into the ",Object(i.b)("inlineCode",{parentName:"h4"},"i18nProvider")," in ",Object(i.b)("inlineCode",{parentName:"h4"},"src/App.js")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const frenchMessages = require('./french.JSON'); //path to french language JSON file\nconst englishMessages = require('./english.JSON'); //path to french language JSON file\nconst messages = {\n  fr: frenchMessages,\n  en: englishMessages,\n};\n")),Object(i.b)("p",null,"In Above sample, fr and en are the language codes which will be used as the identifiers of the language. Messages object will be supplied to ",Object(i.b)("inlineCode",{parentName:"p"},"i18nProvider")," as follows"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const i18nProvider = polyglotI18nProvider(locale => messages[locale], 'en');\n")),Object(i.b)("p",null,"Here we are using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/marmelab/react-admin/blob/master/docs/Translation.md"}),Object(i.b)("inlineCode",{parentName:"a"},"polyglotI18nProvider"))," for i18n and setting ",Object(i.b)("inlineCode",{parentName:"p"},"'en'")," as the default language."),Object(i.b)("p",null,"Once you are done with setting up the provider, you just need to include it in the ",Object(i.b)("inlineCode",{parentName:"p"},"<Admin>")," and ",Object(i.b)("inlineCode",{parentName:"p"},"<Provider>")," selectors as follows,"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"})," const App = () => {\n       return (\n           <Provider\n     store={createAdminStore({\n                   authProvider,\n     history,\n     i18nProvider,\n     dataProvider,\n     })}\n           >\n    <MuiThemeProvider theme={createMuiTheme(theme)}>\n    <Admin  i18nProvider={i18nProvider}\n                       catchAll={Error404Page}\n                       appLayout={CustomLayout}\n                       authProvider={authProvider}\n                       ...\n")),Object(i.b)("p",null,"Now you can move forward to add languages in ",Object(i.b)("inlineCode",{parentName:"p"},"config.json")," in ",Object(i.b)("inlineCode",{parentName:"p"},"src/")," For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'...\n"languages": [\n  {\n      "id": "en",\n      "title": "English",\n      "flag": "us"\n  },\n  {\n      "id": "fr",\n      "title": "French",\n      "flag": "fr"\n  }\n]\n...\n')),Object(i.b)("p",null,"Here we have 2 languages, ",Object(i.b)("strong",{parentName:"p"},"French")," and ",Object(i.b)("strong",{parentName:"p"},"English")," with following parameters:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},'"id" : language identifier // Should be same as in the messages object'),Object(i.b)("li",{parentName:"ul"},'"title" : lable, which will be visible in the language switcher on the top right of Appbar'),Object(i.b)("li",{parentName:"ul"},'"flag" : (optional) This will be the name of flag for the language to display in language switcher. You will have to save these flag files (as png) in ',Object(i.b)("inlineCode",{parentName:"li"},"public/assets/images/flags/"))),Object(i.b)("h3",{id:"usage"},"Usage:"),Object(i.b)("p",null,"All the translation of texts inside the ",Object(i.b)("inlineCode",{parentName:"p"},"<Admin>")," selector will be taken care of automatically by the react-admin. But you'll have to implement all other translations by yourself and you can translate static text as well as dynamic text through translation provider as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'import { translate } from "react-admin";\n...\n<div>{translate("ra.actions.add")}</div>\n...\n')),Object(i.b)("p",null,"Translation provider will pick the language file according to the selected language and will look for property ",Object(i.b)("inlineCode",{parentName:"p"},"ra.actions.add")," and will display the value of that propery dynamically."))}p.isMDXComponent=!0},237:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return g}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o({},n,{},e)),t},d=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),b=a,g=d["".concat(l,".").concat(b)]||d[b]||u[b]||i;return t?r.a.createElement(g,o({ref:n},c,{components:t})):r.a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=b;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);